#!/usr/bin/env ruby

require 'set'

class Array

  #
  # Remove one instance of each letter in "letters" from the array.
  #
  # (i.e. different from "array - letters", which removes ALL copies
  #  of each letter in "letters" from the array.)
  #
  def without(letters)
    grouped = group_by { |letter| letter }

    letters.each do |letter|
      if group = grouped[letter]
        group.pop
      else
        raise "Error: tried to remove #{letter.inspect} from #{self.inspect}"
      end
    end

    grouped.values.flatten
  end

end


class Anagrammer

  attr_accessor :words

  SHORTWORDS = %w[
    a in be to if in of at it ho no ye yo we
    so um uh us vs ya am he jr me mr ms oz do
    go hi id is km lb kg ow ox oh oi my ma
  ]

  def initialize(wordlist="/usr/share/dict/words")
    @words = Set.new open(wordlist).
                map { |w| w.chomp.chomp("'s") }.
                select { |w| w.size > 2 and w.upcase != w }.
                map { |l| l.downcase }

    @words += SHORTWORDS
  end

  def words_from(letters)
    return to_enum(:words_from, letters) unless block_given?

    letters = letters.sort.reverse

    (1..letters.size).each do |n|
      letters.permutation(n) do |perm|

        word = perm.join

        if @words.include? word
          remaining = letters.without(perm)
          
          if remaining.any?
            words_from(remaining).map { |subword| yield "#{word} #{subword}" }
          else
            yield word
          end
        end

      end
    end
  end

  def solve(phrase)
    puts "# Searching for anagrams of #{phrase.inspect}..."
    letters = phrase.downcase.scan(/\w/)
    words_from(letters)
  end

end

if $0 == __FILE__
  begin

    if ARGV.empty?
      puts "usage: anagram [phrase]"
      exit 1
    end

    phrase = ARGV.join(" ")

    Anagrammer.new.solve(phrase).each do |word|
      puts word
    end

  rescue Interrupt
    # SIGINT or ^C received
    exit 130 # INT received
  rescue Errno::EPIPE
    # STDOUT was closed before execution completed
    exit 74 # EX_IOERR
  end
end
