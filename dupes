#!/usr/bin/env ruby
require 'epitools'
require 'slop'

class FakeOptions
  def method_missing(*args); nil; end
end

def parse_options
  Slop.parse(help: true, strict: true) do
    banner 'Usage: dupes [options] <files or dirs...>'

    on 'd',  'delete',      'Delete dupes'
    # on 'v',  'verbose',     'with verbosity'
    on 'i',  'interactive', 'Delete with interactivity'
  end
end

def without_common_prefix(files)
  x, *xs = files.map &:to_s

  x.each_char.with_index do |c, i|
    unless xs.all? { |s| s[i] == c }
      return [x, *xs].map { |s| s[i..-1] }
    end
  end

  [x, *xs]
end  

###

if ARGV.empty? or ARGV.any? { |opt| opt[/^-/] }
  opts = parse_options
else
  opts = FakeOptions.new
end

### 

files = ARGV.map do |arg|
  path = Path[arg]
  path.dir? ? path.ls_r.select(&:file?) : path 
end.flatten

$stderr.puts "* MD5ing #{files.size} files..."

sets_of_dupes = files.
  group_by(&:md5).
  values.
  map { |fs| fs.sort_by { |f| f.to_s.size } }.
  select { |files| files.size > 1 }

if sets_of_dupes.empty?
  puts "No dupes!"
  exit
end

if opts.interactive?
  deleter = Path.which("trsh", "rm").compact.first
  
  sets_of_dupes.each do |dupes|

    without_common_prefix(dupes).each_with_index do |name, i|
      puts "#{i+1}) #{name}"
    end

    print "delete> "

    unless choice = $stdin.gets.strip
      puts "Skipping"
      next
    end

    unless file_to_delete = dupes[choice.to_i-1]
      puts "Invalid choice."
      redo
    end

    cmd = [deleter, file_to_delete]
    p cmd.map(&:to_s)
    system *cmd

    puts
  end
else
  sets_of_dupes.each { |dupes| puts dupes.join(" | ") }
end

# grouped_dupes = ARGV.map(&:to_Path).
#       map { |path| path.dir? ? path.ls_r : path }.
#       flatten.
#       select(&:file?).
#       group_by(&:md5).
#       select {|k, v| v.size > 1}.
#       map_values{|v| v.map(&:path) }

# puts "* Found #{grouped_dupes.size} dupes..."

###

# if opts.delete?
#   puts "* Deleting dupes:"
#   grouped_dupes.each do |hash, dupes|
#     orig = dupes.pop
#     puts "* #{orig}"
#     dupes.each do |dupe|
#       puts "  |_ DELETE: #{dupe}"
#       File.unlink dupe
#     end
#   end
# end   