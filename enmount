#!/usr/bin/env ruby
require 'epitools'
args = ARGV

# TODO:
#
#   * Extensions map to mount programs
mounters = {
   { :ext => /(iso|bin)/i }       => 'fuseiso',
   { :protocol => /(sftp|ssh)/i } => 'sshfs',
   { :ext => /zip/i }             => 'fuse-zip',
}

class Hash
  
  #
  # Is this hash a subset or equal to `other`?
  # (note: compares values with ===)
  #
  def ===(other)
    all? do |key, comparee|
      value = other[key]
      value && comparee === value
    end
  end

end
  
# TODO: Use the Hash#=== Luke! 

args.each do |arg|
  path = Path[arg]
  matches = mounters.find do |hash, app|
    hash.all? do |attr, acceptable_values| 
      if attr.respond_to?(:call) 
        value = path.instance_eval(&attr)
      else
        value = path.send(attr) if path.respond_to? attr
      end  
      value =~ acceptable_values
    end
  end
  p matches
end
exit 1

unless args.any?
  puts "usage: unmount <directory> [ <directory> [ ... ] ]"
  exit 1
end

# /dev/sda2 on / type ext4 (rw,errors=remount-ro,commit=0)

class Mount < Struct.new(:dev, :path, :type, :options)
  
  def self.from_line(line)
    if line =~ %r{^(\S+) on (\S+) type (\S+) \((\S+)\)$} 
      new($1, $2, $3, $4)
    end
  end
  
end
    
mounts = `mount`.lines.map{|line| Mount.from_line(line) }.compact

for arg in args
  
  print "unmount #{arg.inspect}: "
  
  unless File.directory? arg
    puts "FAIL! (not a directory)"
    next
  end
  
  abspath = File.expand_path(arg)

  matches = mounts.select{|mount| mount.path == abspath }
  
  if matches.empty?
    puts "FAIL! (not mounted)"
    next
  end
  
  if matches.size > 1
    puts "FAIL! (too many matching mountpoints...)"
    p matches
    puts
    next
  end
  
  for match in matches
  
    success = if match.type[/^fuse/]
                system("fusermount -u #{arg}")
              else
                system("sudoifnotroot umount #{arg}")
              end
      
    puts( success ? "SUCCESS!" : "FAIL!" )
      
  end
  
end
