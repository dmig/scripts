#!/usr/bin/env ruby
#require 'epitools'
require 'socket'
require 'pp'

class Foobar

  attr_accessor :sock, :current

  def initialize(host="localhost", port=3334, &block)
    @sock = TCPSocket.new(host, port)
    raise "Could not connect" unless readlines.grep(/Connected/).any?
    @current = readlines
  end
  
  def self.control(&block)
    foobar = self.new
    foobar.instance_eval(&block)
    foobar.command("exit")
    foobar.close
  end
  
  def readlines
    sock.recv(2**16).lines.map { |l| l.strip }
  end
  
  def command(msg, verbose=false)
    #puts "<light_blue>>> <light_yellow>#{msg}".colorize if verbose
    puts ">> #{msg}" if verbose
    sock.write( msg+"\r\n" )
    print_response if verbose
  end
  
  def print_response
    readlines.each {|line| puts line }
  end

  %w[ stop play pause next prev ].each do |command|
    define_method(command) do
      command(command)
    end
  end
  
  def close
    sock.close
  end
  
  def toggle_shuffle!
    command("order")
    response = readlines
    response.grep("333|Default|") { command("order shuffletrack"); puts "Shuffle enabled!" } 
    response.grep("333|Random|") { command("order default"); puts "Shuffle disabled!" }
  end
  
  
  def on_readline(&block)
    loop do
      r, w, e = IO.select([sock])
      readlines.each { |l| yield l.strip } if r.any?
    end
  end
  
  def notify!
    puts "Notifying..."
    on_readline do |line|
      puts line
      i = parse(line)
      message = nil
      
      case i
      when Track
        if i.seek < 1.0
          title = "#{i.artist} - #{i.title}"
          subtitle = "#{i.album}"
          subtitle += " (#{i.year})" if i.year > 0
          urgency = "normal"
        end
      when String
        title = i
        urgency = "low"
      end
      
      if title
        args = [
          "notify-send", 
          "--urgency=#{urgency}", 
          "--icon=/home/epi/.foobar2000/icon-white.png", 
          #"--expire-time=2", 
          title
        ]
        
        args.push(subtitle) if subtitle
        
        system(*args)
      end
    end
  end
  
 
  class Track < Struct.new(:x, :pos, :seek, :mp3, :bitrate, :artist, :album, :year, :genre, :num, :title)
    def initialize(*args)
      super
      self.pos      = pos.to_i
      self.seek     = seek.to_f
      self.bitrate  = bitrate.to_i
      self.year     = year.to_i
    end
  end

  def parse(s)
  
    code, *args = s.split("|")
    
    case code
      when "111" then Track.new(*args)
      when "112" then "Stopped"
      when "113" then "Paused"
      when "222" then nil # volume
      when "333" then args.first == "Random" ? "Shuffle ON" : "Shuffle OFF"
    end
    
  end
  
end

if $0 == __FILE__
  
  
  Foobar.control do
    
    if ARGV.empty?
    
      puts "usage: foo <command>"
      puts
      puts "Commands:"
      puts
      command "help"
      readlines.each do |line|
        if line =~ /^999\|(.+)\|$/
          puts "  #{$1}"
        end
      end
      
    elsif ARGV == ["-n"]
      
      notify!
    
    elsif ARGV == ["shuffle"]
    
      toggle_shuffle!
    
    else
    
      command ARGV.join(' '), true
      
    end
    
  end 
  
end
