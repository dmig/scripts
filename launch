#!/usr/bin/env ruby
CACHE_DIR     = File.expand_path (ENV["XDG_CACHE_HOME"] || "~/.cache") + "/launch"
BINARIES_FILE = File.join CACHE_DIR, "binaries.cached"
FREQ_FILE     = File.join CACHE_DIR, "frequencies.marshal"
FREQ_BACKUP   = FREQ_FILE + ".bak"

unless File.exists? CACHE_DIR
  require 'fileutils'
  FileUtils.mkdir_p(CACHE_DIR)
end

###############################################################################

def freqs
  if not @freqs

    if File.exists? FREQ_FILE
      begin
        @freqs = open(FREQ_FILE, "rb") { |f| Marshal.load f.read }
      rescue
        if File.exists? FREQ_BACKUP
          @freqs = open(FREQ_BACKUP, "rb") { |f| Marshal.load f.read } rescue {}
        end
      end
    else
      @freqs = {}
    end
    
  end

  @freqs
end

def write_freqs
  File.rename(FREQ_FILE, FREQ_BACKUP) if File.exists? FREQ_FILE
  open(FREQ_FILE, "wb") { |f| f.write Marshal.dump(freqs) }
end

def sorted_bins(bins)
  best = freqs.sort_by {|k,v| -v }.map(&:first)
  if best.any?
    best + ["------------------"] + (bins - best)
  else
    bins
  end
end

def increment(bin)
  freqs[bin] ||= 0
  freqs[bin] += 1
  write_freqs
end

###############################################################################

splitpath = ENV["PATH"].split(":")
dmenu_options = '-l 20 -i -b -p "Launch:"'

if system("stest", "-dqr", "-n", BINARIES_FILE, *splitpath) # if new files in path...
  bins = `stest -flx #{splitpath.join ' '} | sort -u | tee #{BINARIES_FILE}`.lines.map(&:strip)
else
  # result = `cat "#{BINARIES_FILE}" | dmenu #{dmenu_options}`
  bins = File.read(BINARIES_FILE).lines.map(&:strip)
end

# p [:unsorted, bins[0..10]]

bins = sorted_bins(bins)
  
# p [:sorted, bins[0..10]]

result = IO.popen("dmenu #{dmenu_options}", "w+") do |dmenu|
  dmenu.puts bins.join("\n")
  dmenu.close_write
  dmenu.read.strip
end

# p [:choice, result]

exit if result.empty?


if result[0] == "."
  exec("term -H #{result[1..-1]}")
else
  if bins.include? result
    increment(result) 
  else
    puts "Error: binary #{result.inspect} not in path."
  end
  
  exec(result)
end
