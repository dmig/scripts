#!/usr/bin/env ruby
# encoding: utf-8

require 'dbm'
###################################################################

CACHE_DIR = File.expand_path("~/.cache/oui")
DB_FILE   = File.join CACHE_DIR, "oui-database"

CSV_URL   = "http://standards-oui.ieee.org/oui/oui.csv"
# CSV_URL   = "oui.csv"

###################################################################

def help!
  puts
  puts "Usage:"
  puts "  oui [options] <mac address(es)...>"
  puts
  puts "Options:"
  puts "  -u  Update the IEEE database of OUI MAC addresses"
  puts "      (from: #{CSV_URL})"
  puts
end

def commatize(num)
  char = ","
  num.to_s.gsub /(\d)(?=\d{3}+(?:\.|$))(\d{3}\..*)?/, "\\1#{char}\\2"
end

def db_exists?
  Dir["#{DB_FILE}*"].any?
end

def db_open(flags=DBM::READER)
  db = DBM.open(DB_FILE, 0666, flags)
  
  if block_given?
    result = yield db
    db.close
    result
  else
    db
  end
end

def backup(src)
  if File.exists? src
    counter = 1
    dest = "#{src}.bak"

    while File.exists? dest
      counter += 1
      dest = "#{src}.bak#{counter}"
    end

    puts "  |_ database backed up to: #{dest.inspect}"

    File.rename(src, dest)
  end
end

###################################################################

def update

  require 'csv'
  require 'open-uri'

  puts "* Re-importing database..."
  puts "  |_ source: #{CSV_URL.inspect}"

  backup(DB_FILE)

  db_open(DBM::NEWDB) do |db|

    CSV.new(open(CSV_URL), :headers => :first_row).each.with_index do |row, n|
      # MA-L,34F968,"ATEK Products, LLC",210 NE 10th Avenue Brainerd MN US 56401
      type, hex, company, address = row.fields
      company.strip! if company
      address.strip! if address

      db[hex] = "#{company}\n#{address}"
      
      print "\e[1G  |_ records imported: #{commatize(n)}\e[J" if n % 137 == 0
    end

    puts
    puts "* Done!"

  end

end  

###################################################################

def lookup_macs(args)

  db_open do |db|
    args.map do |arg|
      prefix = arg.upcase.scan(/[0-9A-F]/).take(6).join

      if prefix.size < 6
        $stderr.puts "* Error: #{arg} is too short -- must be at least 6 chars (3 hex bytes)"
        next
      end

      result = db[prefix]
      result && result.split("\n")
    end
  end

end

###################################################################


if $0 == __FILE__

  Dir.mkdir CACHE_DIR unless File.exists? CACHE_DIR

  # Help
  if ARGV.include? "-h" or ARGV.include? "--help"
    help!

  # Update
  elsif ARGV.include? "-u"
    update

  # No database
  elsif not db_exists?
    puts "You must first download the OUI database. Run 'oui -u'."
    exit 1

  # No arguments
  elsif ARGV.empty?
    help!
    db_open { |db| puts "(OUI database currently has #{db.size} entries)" }

  # Display results
  else
    results = lookup_macs(ARGV)
    ARGV.zip(results).each do |arg, result|
      nicearg = arg.upcase.scan(/[0-9A-F\:\-]/).join
      if result
        company, address = result
        puts "#{nicearg} - #{company}"
        puts (" " * (nicearg.size+3)) + address if address
      else
        puts "#{nicearg} - not found"
      end
    end
  end

end
