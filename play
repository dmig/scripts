#!/usr/bin/env ruby

###########################################################

LOGFILE = File.expand_path("~/play.log")

###########################################################

def help!
  puts
  puts "Usage:"
  puts "  play <video url> => streams a youtube/vimeo/etc. in mplayer"
  puts "  play -l          => log of 10 most recent videos"
  puts "  play -l <query>  => search log for <query>"
  puts "  play -l<n>       => log of <n> most recent videos"
  puts "  play -s<time>    => seek to time"
  puts
  exit 1
end

def notify(type, title, body, time: 5)
  require 'cgi'

  puts "#{title}"
  puts "  #{body}"

  time_in_ms = time * 1000

  cmd = ["notify-send"]
  cmd << "--expire-time=#{time_in_ms}"
  cmd << "--app-name=play"
  cmd << "--icon=#{type}"
  cmd += [title, body].map {|s| CGI.escapeHTML s }

  p cmd

  system *cmd
end

def run(*cmd)
  require 'open3'
  # stdout_str, stderr_str, status = Open3.capture3([env,] cmd... [, opts])  
  out, err, status = Open3.capture3(*cmd)
  [out.strip, err.strip, status]
end

def youtube_dl(url)
  out, err, status = run("youtube-dl", "-o", "%(title)s (%(upload_date)s)", "--no-playlist", "-g", "--get-filename", url)

  if not status.success? or out.empty?
    notify(:error, "youtube-dl error #{status.exitstatus}:", "#{err}\n( #{url} )")
    exit 1
  end

  media_url, title = out.lines.take(2).map(&:strip)

  [media_url, title]
end

def write_to_log(url, title)
  open(LOGFILE, "a") do |f|
    timestamp = Time.now.strftime("%Y-%m-%d %H:%M:%S")
    f.puts "#{timestamp} | #{url} | #{title}"
  end
end

class LogEntry < Struct.new(:date, :time, :url, :title)
  def initialize(line)
    timestamp, url, title = line.strip.split(" | ", 3)
    date, time            = timestamp.split

    super(date, time, url, title)
  end
end

def tail_log(query=nil, n=10)
  require 'epitools/colored'

  if query
    if query.is_a? Array
      if query.any?
        query = query.join(" ") 
      else
        query = nil
      end
    end
  end

  regexp = /#{query}/i if query

  ## Header
  
  puts "----------------------------------".grey
  if query
    puts " <15>Searching for: <14>#{query.inspect}".colorize
  else
    puts " #{n} most recent plays:".light_white
  end
  puts "----------------------------------".grey
  puts

  ## Results

  open(LOGFILE) do |log|
    entries = log.reverse_each.lazy.map {|l| LogEntry.new(l) }
    entries = entries.select { |entry| entry.title =~ regexp } if query

    results = entries.take(n).to_a.reverse

    results.each do |result|
      indent = " " * (result.date.size - result.time.size)

      title = result.title
      title = title.gsub(regexp) { |m| "<14>#{m}</14>" } if query

      puts "<10>#{result.date} <12>| <11>#{title}".colorize
      puts "<2>#{indent}#{result.time} <4>| <9>#{result.url}".colorize
      puts
    end
  end
end

def play_click_sound
  run "mplayer", "-really-quiet", File.expand_path("~/scripts/sounds/click.mp3")
end

###########################################################

args = ARGV
opts, args = args.partition { |arg| arg[/^--?\w/] }

seek = nil

if opts.any?
  opts.each do |opt|
    case opt 
    when "-h", "--help"
      help!
    when "-l"
      tail_log(args)
      exit
    when /^-l(\d+)$/
      tail_log(args, $1.to_i)
      exit
    when /^-s([\d:]+)$/
      seek = $1
    else
      puts "Unrecognized option: #{opt}"
    end
  end
end

help! if args.empty?

###########################################################

url = args.first

notify(:info, "Processing:", url, time: 3); play_click_sound

media_url, title = youtube_dl(url)

write_to_log(url, title)

notify(:video, "Playing:", title, time: 4)

cmd = %w[mplayer -title] + 
        [title] + 
      %w[-really-quiet -cache 20000 -cache-min 0.0128] + 
        [media_url]

cmd += ["-ss", seek] if seek

system(*cmd)
