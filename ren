#!/usr/bin/env ruby
require 'coolline'
require 'fileutils'

def split_ext(filename)
  filename.split /(\.[^\.]+)$/
end

def restore_spaces(s)
  s.gsub(/(?<=\S)(_|\.)(?=\S)/, ' ')
end

def edit_filename(prompt, filename)

  Coolline.new do |c|
    # ^u removes underscores and stuff
    c.bind "\x15" do |inst|
      base, ext = split_ext inst.line
      pos = inst.pos

      inst.line = restore_spaces(base) + ext
      inst.pos = pos
    end

    # ^d deletes to the extension
    c.bind "\x04" do |inst|
      start  = inst.pos
      finish = inst.line.rindex(".")

      inst.line[start...finish] = "" if start < finish
    end
  end.readline(prompt, filename)

end


if __FILE__ == $0

  puts
  puts "#{ARGV.size} thing(s) to rename..."
  puts

  for arg in ARGV
    puts "Rename: #{arg}"

    new_filename = edit_filename("    to: ", arg)

    puts

    if arg == new_filename
      puts "Skipping..."
      next
    end

    if File.exists? new_filename
      print "#{new_filename} exists. Overwrite? (y/N) "
      case gets
      when /^n$/i, "\n"
        puts "Skipping..."
        next
      else
        puts "Clobbering..."
      end
    end

    puts "Renaming #{arg.inspect} to #{new_filename.inspect}"
    FileUtils.mv(arg, new_filename)
    puts
  end

end