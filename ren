#!/usr/bin/env ruby
require 'coolline'
require 'fileutils'
require 'set'

#
# Returns: dir, basename, ext
#
def path_parts(path)
  if path =~ %r{^(.+/)?(.+?)(\..+)?$}
    return $1, $2, $3
  else
    raise "Cannot match path..."
  end
end

#
# Converts _'s and .'s to spaces
#
def restore_spaces(s)
  s.gsub(/(?<=\S)(_|\.)(?=\S)/, ' ')
end

#
# Puts parens around years
#
def bracket_years(s)
  s.gsub(/\b(?:19|20)\d\d\b/, "(\\0)")
end

#
# Convert the String to Title Case.
#
LOW_WORDS = Set.new %w[of to or the and an a at is for from in]
def titlecase(str)
  first = true
  words = str.downcase.split(/\b/)

  words.map.with_index do |word,i|
    if LOW_WORDS.include?(word) and i > 0 # leave LOW_WORDS lowercase, unless it's the first word.
      word
    else
      word.gsub(/\b\w/) { |c| c.upcase } # capitalize first letter
    end
  end.join('')
end



#
# Edit a filename
#
def edit_filename(prompt, filename)

  Coolline.new do |c|

    c.word_boundaries = [" ", "\t", ".", ",", ";", '"', "'", "`", "<", ">",
                         "=", ";", "|", "{", "}", "(", ")", "-", "/"]

    # Alt-u capitalizes everything
    c.bind "\eu" do |inst|
      dir, basename, ext = path_parts(inst.line)
      pos                = inst.pos

      new_filename       = "#{dir}#{titlecase(basename)}#{ext}"

      inst.line          = new_filename
      inst.pos           = pos

      inst.menu.string = "(Capitalized) #{dir}|#{basename}|#{ext}"
    end

    # ^u removes underscores and stuff
    c.bind "\x15" do |inst|
      dir, basename, ext = path_parts(inst.line)
      pos                = inst.pos

      new_filename       = "#{dir}#{bracket_years(restore_spaces(basename))}#{ext}"

      inst.line          = new_filename
      inst.pos           = pos

      inst.menu.string   = "(Underscores removed) #{dir}|#{basename}|#{ext}"
    end

    # ^d deletes to the extension
    c.bind "\x04" do |inst|
      start  = inst.pos
      finish = inst.line.rindex(".") || inst.line.size

      inst.line[start...finish] = "" if start < finish
      inst.menu.string = "(Deleted to end)"
    end
  end.readline(prompt, filename)

end

#
# Clears out keyboard buffer.
#
def STDIN.purge
  loop { read_nonblock(4096) } rescue nil
end


if __FILE__ == $0

  puts
  puts "#{ARGV.size} thing(s) to rename..."
  puts

  for arg in ARGV
    unless File.exists? arg
      puts "Error: #{arg.inspect} not found..."
      next
    end

    puts "Rename: #{arg}"

    begin
      new_filename = edit_filename("    to: ", arg)
    rescue Interrupt
      puts
      puts
      puts "Rename aborted..."
      exit 1
    end

    puts

    if arg == new_filename
      puts "Skipping..."
      puts
      next
    end

    if File.exists? new_filename
      STDIN.purge
      print "#{new_filename} exists. Overwrite? (y/N) "
      case $stdin.gets.strip.downcase
      when "y"
        puts "Clobbering..."
      else
        puts "Skipping..."
        next
      end
    end

    puts "Renaming #{arg.inspect} to #{new_filename.inspect}"
    FileUtils.mv arg, File.expand_path(new_filename)
    puts
  end

end
