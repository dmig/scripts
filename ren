#!/usr/bin/env ruby
require 'coolline'
require 'fileutils'


def split_ext(filename)
  filename.split /(\.[^\.]+)$/
end

def restore_spaces(s)
  s.gsub(/(?<=\S)(_|\.)(?=\S)/, ' ')
end

def bracket_years(s)
  s.gsub(/(?:19|20)\d\d/, "(\\0)")
end

LOW_WORDS = %w[of or the and an a at is for from]
def titlecase(str)
  first = true
  words = str.downcase.split(/\b/)

  words.map.with_index do |word,i|
    if LOW_WORDS.include?(word) and i > 0 # leave LOW_WORDS lowercase, unless it's the first word.
      word
    else
      word.gsub(/\b\w/) { |c| c.upcase } # capitalize first letter
    end
  end.join('')
end

def edit_filename(prompt, filename)

  Coolline.new do |c|

    c.word_boundaries = [" ", "\t", ".", ",", ";", '"', "'", "`", "<", ">",
                         "=", ";", "|", "{", "}", "(", ")", "-", "/"]

    # Alt-u capitalizes everything
    c.bind "\eu" do |inst|
      base, ext = split_ext inst.line
      pos       = inst.pos
      
      inst.line = titlecase(base) + (ext||'')
      inst.pos  = pos
      inst.menu.string = "(Capitalized)"
    end

    # ^u removes underscores and stuff
    c.bind "\x15" do |inst|
      base, ext = split_ext inst.line
      pos       = inst.pos
      
      inst.line = bracket_years(restore_spaces(base)) + (ext || "")
      inst.pos  = pos
      inst.menu.string = "(Underscores removed)"
    end

    # ^d deletes to the extension
    c.bind "\x04" do |inst|
      start  = inst.pos
      finish = inst.line.rindex(".") || inst.line.size

      inst.line[start...finish] = "" if start < finish
      inst.menu.string = "(Deleted to end)"
    end
  end.readline(prompt, filename)

end

def STDIN.purge
  loop { read_nonblock(4096) } rescue nil
end


if __FILE__ == $0

  puts
  puts "#{ARGV.size} thing(s) to rename..."
  puts

  for arg in ARGV
    unless File.exists? arg
      puts "Error: #{arg.inspect} not found..."
      next
    end

    puts "Rename: #{arg}"

    new_filename = edit_filename("    to: ", arg)

    puts

    if arg == new_filename
      puts "Skipping..."
      puts
      next
    end

    if File.exists? new_filename
      STDIN.purge
      print "#{new_filename} exists. Overwrite? (y/N) "
      case $stdin.gets.strip.downcase
      when "y"
        puts "Clobbering..."
      else
        puts "Skipping..."
        next
      end
    end

    puts "Renaming #{arg.inspect} to #{new_filename.inspect}"
    FileUtils.mv arg, File.expand_path(new_filename)
    puts
  end

end
