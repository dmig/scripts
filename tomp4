#!/usr/bin/env ruby
gem 'slop', "~> 3.6"
require 'slop'
require 'epitools'

def error(msg)
  $stderr.puts msg.light_red
end

opts = Slop.parse(help: true, strict: true) do
  banner 'Usage: tomp4 [options] <file(s)...>'

  on "c",  "copy",     "Copy video stream (don't re-encode)"
  on "y",  "yes",      "Overwrite existing"
  on "n",  "no",       "Skip existing"
  on "d=", "outdir",   "Output directory"
  on 'a=', 'acodec',   'Output audio codec (eg: mp3, aac)', default: "copy"
  on 'v=', 'vcodec',   'Output video codec', default: "h264"
end

files = ARGV.map(&:to_Path)

# Two-pass encode:
# ffmpeg -y -i "$IN" -b 2M -bt 4M -c:v h264 -pass 1 -pre medium_firstpass -an "$OUT"
# ffmpeg -y -i "$IN" -b 2M -bt 4M -c:v h264 -pass 2 -pre medium -c:a aac -ab 192k "$OUT"

if dir = opts[:outdir]
  dir = dir.to_Path
  unless dir.dir?
    error "ERROR: #{dir} is not a directory"
    exit 1
  end
else 
  dir = nil
end

files.each do |inp|
  puts "----------------------------------------------------------------"
  puts " Encoding:"
  puts "    in: #{inp}"

  unless inp.exists?
    error "ERROR: File doesn't exist."
    next
  end

  if inp.ext == "mp4"
    error "ERROR: Input file is already a .mp4 -- skipping"
    next
  end

  out = inp.with(ext: "mp4")
  out.dir = dir.dir if dir

  puts "   out: #{out}"

  cmd = %w[ffmpeg -hide_banner]

  cmd << "-y" if opts.yes?
  cmd << "-n" if opts.no?

  cmd += ["-i", inp]

  if opts.copy?
    vcodec = "copy"
  else
    vcodec = opts[:vcodec]
  end

  acodec = opts[:acodec]

  cmd += ["-c:v", vcodec, "-c:a", acodec]
  cmd += %w[-crf 20] if opts.hq?
  cmd += %w[-movflags faststart]

  cmd << out

  puts "   cmd: #{cmd.join(" ")}"
  puts "----------------------------------------------------------------"
  puts

  begin
    unless system(*cmd)
      error "ERROR: Conversion failed.".bright_red
      next
    end

    unless system("x", "--copy", inp, out)
      error "ERROR: Copying metadata failed."
      next
    end
  rescue Interrupt
    puts
    puts
    exit 1
  end
end
