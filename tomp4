#!/usr/bin/env ruby
gem 'slop', "~> 3.6"
require 'slop'
require 'epitools'

def error(msg)
  $stderr.puts "ERROR: #{msg}".light_red
end

opts = Slop.parse(help: true, strict: true) do
  banner 'Usage: tomp4 [options] <file(s)...>'

  on 'y',  'yes',      'Overwrite existing'
  on 'n',  'no',       'Skip existing'
  on 's=', 'scale',    'Scale to resolution (eg: 1024x768, 1024:-1, 1024, -1:720)'
  on 'q=', 'quality',  'Quantization Parameter (eg: 22)'
  on 'd',  'deinterlace', 'Blend deinterlace (using yadif)'
  on 'b',  'bob',      'Bob deinterlace (using yadif)'
  on "r=", "aspect",   'Aspect ratio (eg: 4:3, 1.6666)'
  on 'd=', 'outdir',   'Output directory'
  on 'o=', 'outfile',  'Output file'
  on 'a=', 'acodec',   'Output audio codec (eg: mp3, aac)', default: "copy"
  on 'v=', 'vcodec',   'Output video codec (eg: h264, hevc, nvenc_h264)', default: "h264"
  on 'N',  'nvidia',   'Use nvidia-accelerated encoder'
  on 'c=', 'crop',     'Crop video (in mplayer format: w:h:x:y)'
end

files = ARGV.map(&:to_Path)

if files.empty?
  puts opts
  exit 1
end

# Two-pass encode:
# ffmpeg -y -i "$IN" -b 2M -bt 4M -c:v h264 -pass 1 -pre medium_firstpass -an "$OUT"
# ffmpeg -y -i "$IN" -b 2M -bt 4M -c:v h264 -pass 2 -pre medium -c:a aac -ab 192k "$OUT"

if dir = opts[:outdir]
  dir = dir.to_Path
  unless dir.dir?
    error "#{dir} is not a directory"
    exit 1
  end
else 
  dir = nil
end

files.each do |inp|
  puts "----------------------------------------------------------------"
  puts " Encoding:"
  puts "    in: #{inp}"

  unless inp.exists?
    error "File doesn't exist."
    next
  end

  if inp.ext == "mp4"
    error "Input file is already a .mp4 -- skipping"
    next
  end

  if opts[:outfile]
    out = Path[opts[:outfile]]
  else
    out = inp.with(ext: "mp4")
    out.dir = dir.dir if dir
  end

  cmd = %w[ffmpeg -hide_banner]

  cmd << "-y" if opts.yes?
  cmd << "-n" if opts.no?

  cmd += ["-i", inp]

  vcodec = opts[:vcodec]
  vcodec = "nvenc_#{vcodec}" if opts.nvidia? and vcodec != "copy"

  acodec = opts[:acodec]
  acodec = "libfdk_aac" if acodec == "aac"

  # cmd += %w[-crf 20] if opts.hq?
  cmd += ["-c:v", vcodec, "-c:a", acodec]
  cmd += ["-qp", opts[:quality]] if opts.quality?
  cmd += ["-aspect", opts[:aspect]] if opts[:aspect]
  cmd += %w[-movflags faststart]

  vfilters = []
  vfilters << "crop=#{opts[:crop]}" if opts[:crop]
  vfilters << "yadif"             if opts.deinterlace?
  vfilters << "yadif=1"           if opts.bob?

  if scale = opts[:scale]
    case scale 
    when /^(\d+)x(\d+)$/
      scale = "#{$1}:#{$2}"
    when /^(\d+)$/
      scale = "#{$1}:-1"
    when /^-?\d+:-?\d+$/
      # looks good! no munging necessary ^_^
    else
      error "Unrecognized scale option: #{scale}"
      exit 1
    end

    vfilters << "scale=#{scale}"
  end

  cmd += ["-filter:v", vfilters.join(",")] if vfilters.any?
  cmd += ["-vf", vfilters.join(",")] if vfilters.any?

  cmd << out
  puts "   out: #{out}"
  puts "   cmd: #{cmd.join(" ")}"
  puts "----------------------------------------------------------------"
  puts

  begin
    unless system(*cmd)
      error "Conversion failed."
      next
    end

    unless system("x", "--copy", inp, out)
      error "Copying metadata failed."
      next
    end
  rescue Interrupt
    puts
    puts
    exit 1
  end
end
