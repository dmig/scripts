#!/usr/bin/env ruby

require 'nokogiri'
require 'open-uri'
require 'epitools/colored'

### Settings ##############################################

CLIENT      = "utorrent"
MAX_RESULTS = 20

###########################################################
# TODO:
# * Fix Term::Table API
###########################################################

TRACKERS = %w[
  http://tracker.best-torrents.net:6969/announce
  http://tracker.ccc.de:80/
  udp://tracker.ccc.de:80/
  udp://open.demonii.com:1337/announce
  http://inferno.demonoid.com:3407/announce
  http://exodus.desync.com:6969/announce
  http://www.eddie4.nl:6969/announce
  udp://fr33dom.h33t.com:3310/announce
  http://tracker.ilibr.org:6969/announce
  udp://tracker.istole.it:6969/
  udp://tracker.openbittorrent.com:80/
  http://tracker.openbittorrent.com:80/
  udp://tracker.prq.to/announce
  udp://tracker.publicbt.com:80/
  http://tracker.publicbt.com:80/
  udp://11.rarbg.com/announce
  http://9.rarbg.com:2710/announce
  http://bt1.the9.com:6969/announce
  http://tracker.torrent.to:2710/announce
  http://tracker.xpear.de:6969/announce
  http://tracker.yify-torrents.com/announce
]

###########################################################

class Result
  attr_accessor :title, :hash, :votes, :age, :date, :size, :seeds, :peers # :tags

  def initialize(dl)
    link = dl.at("dt a")

    raise if link.nil?

    @title = link.text

    if link["href"] =~ /([0-9a-f]{40})/
      @hash = $1
    end

    dd = dl.at("dd")

    @votes = dd.at(".v").text.strip
    @age   = dd.at(".a").text
    @date  = DateTime.parse dd.at(".a span")["title"]
    @size  = dd.at(".s").text
    @seeds = dd.at(".u").text
    @peers = dd.at(".d").text
  end

  def datestamp
    @date.strftime("%Y-%m-%d")
  end

  def magnet_url
    tracker_params = TRACKERS.map { |tr| "&tr=#{URI.escape(tr)}" }.join("")
    "magnet:?xt=urn:btih:#{hash}&dn=#{title}#{tracker_params}"
  end
end

###########################################################

def search(query)
  url = "http://torrentz.eu/search"
  url += "?f=#{URI.escape(query)}" unless query.empty? 

  page = Nokogiri::HTML(open url)
  page.search(".results dl").
       take(MAX_RESULTS).
       map { |dl| Result.new(dl) rescue nil }.
       compact
end
 
def choose_torrents(results)
  print ">> Torrents to download (eg. 1 3 5-7): "

  begin
    input = $stdin.gets
  rescue Interrupt
    puts
    puts "Nevermind!"
    exit 1
  end

  unless input
    puts
    puts "Fine, be that way!"
    exit 1
  end

  choices = []

  input.split.each do |choice|
    choice.strip!

    case choice
    when /^(\d+)$/
      choices << $1.to_i
    when /^(\d+)-(\d+)$/
      start  = $1.to_i
      finish = $2.to_i
      choices += (start..finish).to_a
    else
      puts "Invalid choice: #{choice}"
    end
  end

  choices.map { |n| results[n-1] }
end

def display(results)
  results.each_with_index do |r, n|
    line = "<13>#{(n+1).to_s.rjust(3)}. "
    # line += " <8>[<12>+#{r.votes}<8>]" unless r.votes.empty?
    # line += " <14>#{r.size} <7>(#{r.age})"
    line += "<10>#{r.seeds.rjust(7)} <8>| <13>#{r.peers.rjust(7)} <8>| <12>#{r.size.rjust(8)} <8>| <11>#{r.age.rjust(9)} <8>| <14>#{r.title}"
    # line += " <7>#{r.date} <10>#{r.seeds} <13>#{r.peers}"

    puts line.colorize
  end
end

###########################################################

if __FILE__ == $0
  query = ARGV.join(" ")

  results = search(query)

  display(results)

  chosen = choose_torrents(results)

  chosen.each do |t|
    system(CLIENT, t.magnet_url)
  end
end
