#!/usr/bin/env ruby

##################################################
# Unwrap!
##################################################
# Unwraps the lines in a text file.
#
# (In other words, it removes all the \n characters
# that were inserted to wrap the lines of text.)
#


DEFAULT_WIDTH = 80

def unwrap(lines, width)
  i = 0
  last = lines.size-1
  
  para = []
  doc = []
  
  loop do
    
    line = lines[i]
    para << line

    unless i == last
      next_words = lines[i+1].split(/\s+/)
      word_following_wrap = next_words[0]
      
      unless word_following_wrap and (line.size + word_following_wrap.size) >= width
        # new para!
        doc << para.join(' ')
        para = []
      end
    end
    
    i += 1
    break if i > last
    
  end  
  
  doc << para.join(' ')
  
  return doc
end

def help
  copyright
  usage
  exit 1
end


def copyright
  puts "Unwrap! v0.0001"
  puts "----------------------------------------------"
  puts "Copyright (c) 2009 by Chris Gahan"
  puts
end  

def usage
  puts "Usage:"
  puts "    unwrap [-w #{DEFAULT_WIDTH}] <input_file.txt> [output_file.txt]"
  puts
  puts "Options:"
  puts "    -w [width]  = Width of wrapped lines (defaults to #{DEFAULT_WIDTH} characters, optional)"
  puts "    -c          = Calculate line lengths"
  puts "    in.txt      = The file to read"
  puts "    out.txt     = The file to write (defaults to standard output, optional)"
  puts
end

def calculate_line_lengths(filename)
  puts "Statistics:"
  puts "----------------------"
  lengths = open(filename).map{|line| line.strip.size}
  n = lengths.size
  sum = lengths.inject(0){|sum,len| sum + len}
  puts "  mean: #{sum.to_f / n}"
  puts "median: #{lengths.sort[n / 2]}"
  puts "   min: #{lengths.min}"
  puts "   max: #{lengths.max}"
end


if $0 == __FILE__

  line_width = DEFAULT_WIDTH

  help if ARGV.size < 1

  if ARGV.first == "-c"
    ARGV.shift
    infile = ARGV.shift
    calculate_line_lengths(infile)
    exit
  end
  
  if ARGV.first == "-w"
    ARGV.shift
    
    if ARGV.first =~ /^\d+$/
      line_width = ARGV.shift.to_i
    else
      STDERR.puts "ERROR: Invalid line width: #{ARGV.first}"
      exit 3
    end
  end
  
  infile = ARGV.shift
  
  unless infile and File.exists? infile
    STDERR.puts "ERROR: Cannot find file: #{infile.inspect}"
    exit 2
  end
  
  if ARGV.any?
    outfile = ARGV.shift
  else
    outfile = nil
  end
    
  copyright if outfile
  
  print "+ Opening #{infile}..." if outfile
  lines = open(infile).map { |line| line.strip }
  
  puts " (#{lines.size} lines)" if outfile
  
  print "+ Unwrapping lines at #{line_width} chars..." if outfile
  doc = unwrap(lines, line_width)
  
  puts " (found #{doc.size} paragraphs)" if outfile
  
  if outfile
    puts "+ Writing #{outfile}..." 
    out = open(outfile,"w")
  else
    out = STDOUT
  end
  
  for para in doc
    out.write("#{para}\n\n")
  end  
  
end
