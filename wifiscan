#!/usr/bin/env ruby

require 'rubygems'
require 'epitools'
require 'pp'

devs = `iwconfig 2> /dev/null`.lines.grep(/802\.11/).map{|l| l.split.first }.compact

for dev in devs

  puts "-"*50
  puts "Wifi device: #{dev}"
  puts "-"*50
  puts
  
  puts "* Scanning for access points..."
  data = `sudo iwlist #{dev} scan`
  #data = open("iwlist.txt").read
    
  puts
  results = data.lines.split_before(/Cell (\d+)/).map do |ap|
  
    result = {}
    
    for line in ap
    
      case line
        when /Address: (.+)/
          result[:mac] = $1
        when /Channel:(\d+)/
          result[:channel] = $1.to_i
        when /ESSID:"([^\"]+)"/
          result[:name] = $1
        # when /Cell (\d+)/
        #   result[:cell] = $1.to_i
        when /Quality=([\d\/]+)\s+Signal level=(.+)/
          quality, signal = $1, $2
          result[:quality] = Ratio[*quality.split('/').map(&:to_i)]
          result[:signal] = signal.strip
        when /(WPA|WPA2|TKIP|PSK)/
          result[:protocols] ||= []
          result[:protocols] << $1
        when /Encryption key:(on|off)/
          result[:encrypted] = ($1 == "on")
      end
      
    end
    
    result[:protocols] && result[:protocols].uniq!
    
    result
 
  end.select(&:any?)
  
  #pp results
  
  for channel, results in results.group_by{|result| result[:channel]}.sort
    puts "Channel: #{channel}"
    
    for result in results.sort_by{|r| r[:quality] }.reverse
      
      params = [
        result[:mac],
        result[:encrypted] ? "ENCRYPTED" : "OPEN", 
        "sig:#{result[:signal]}", 
        result[:protocols] ? "crypto:#{result[:protocols].join('/')}" : nil 
      ].compact
      puts "  #{result[:quality].percent} #{result[:name]} (#{params.join(', ')})"
    end
    puts
  end
  puts 
  
end

